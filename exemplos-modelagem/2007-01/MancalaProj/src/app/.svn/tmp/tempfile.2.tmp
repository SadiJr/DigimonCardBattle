package app;

<<<<<<< .mine
=======

>>>>>>> .r7274
public class ControladorTabuleiro {
 
	protected Jogador[] jogadores;
	protected Tabuleiro tab;
	protected int[] estadoTab;
	protected boolean partidaEmAndamento;
	protected Jogador vencedor;
	protected int interf;
	
	public ControladorTabuleiro(){
		partidaEmAndamento = false;
		this.tab = new Tabuleiro();
		interf = 0;
	}
	
	public void instanciarJogadores(int interf){
		jogadores = new Jogador[2];
		jogadores[0] = new JogadorHumano("A");
		if (this.interf == 0)
			jogadores[1] = new JogadorHumano("B");
		else		
			jogadores[1] = new JogadorMaquina();
		
	}
	
	public int[] informarEstadoAtual(){
		return tab.informarEstadoAtual();
	}
	
	public void prepararTabuleiro() {
		tab.resetarTabuleiro();
		estadoTab = this.informarEstadoAtual();
	}
	
	public int informarPedrasCasa(int casa){
		return tab.informarPedrasCasa(casa);
	}
	
	public int informarPedrasRepositorio(int nroJogador){
		return tab.informarPedrasRepositorio(nroJogador);
	}
	 
	public void definirInterf(int tipoInterface) {
		this.interf = tipoInterface;
	}
	 
	public void verificarContinuidade() {
		int casasVazias = 0;
		estadoTab = this.informarEstadoAtual();
		
		for(int i = 0; i < 6; i ++){
			if(estadoTab[i] == 0){
				casasVazias ++;
			}
		}
		if(!(casasVazias == 6)){
			casasVazias = 0;
			for(int i = 6; i < 12; i ++){
				if(estadoTab[i] == 0){
					casasVazias ++;
				}
			}
		}
		
		if (casasVazias == 6){
			this.verificarVencedor();
			this.partidaEmAndamento = false;
		}
	}
	 
	public void verificarVencedor() {
		
		int repJog0 = tab.informarPedrasRepositorio(0);
		int repJog1 = tab.informarPedrasRepositorio(1);
		
		if (repJog0 > repJog1){
			jogadores[0].setVencedor();
			vencedor = jogadores[0];
		} else if (repJog0 < repJog1){
			jogadores[1].setVencedor();
			vencedor = jogadores[1];
		}
	}
	 
	public boolean verificarPartidaAndamento() {
		return partidaEmAndamento;
	}
	 
	public Jogador informarVencedor() {
		return vencedor;
	}
	 	 
	public int[] distribuirPedras(int[] estadoAtual, int casa, Jogador jogadorDaVez) {
		
		int nroPedraCasa = tab.informarPedrasCasa(casa);
		int PedrasRestantes = nroPedraCasa;
		int casaFinal = (casa+nroPedraCasa)%12;
		estadoAtual[casa]=0;
		estadoAtual = this.tratarCasaFinal(casaFinal, estadoAtual, jogadorDaVez);
		
		for(int i = 0; i < nroPedraCasa; i++){
			if(casa+i == 5 && jogadorDaVez == jogadores[0]){
				estadoAtual[12] = estadoAtual[12]+1;
				PedrasRestantes--;
			}
			
			if(casa+i == 11 && jogadorDaVez == jogadores[1]){
				estadoAtual[13] = estadoAtual[13]+1;
				PedrasRestantes--;
			}
			
			if(!(PedrasRestantes==0)){
				estadoAtual[(casa+1+i)%12] = estadoAtual[(casa+1+i)%12]+1;
				PedrasRestantes--;	
			}			
		}
				
		return estadoAtual;
	}
	
	public int[] tratarCasaFinal(int casaFinal, int estadoAtual[], Jogador jogadorDaVez){
		
		if(casaFinal > 5 && jogadorDaVez == jogadores[0]){
			casaFinal--;
			if(casaFinal==5){
				casaFinal = 12;
				this.trocarVezJogador(jogadorDaVez);
			}
		}else{
			if(estadoAtual[casaFinal]==0 && jogadorDaVez == jogadores[0]){
				estadoAtual[12]= estadoAtual[12]+estadoAtual[11-casaFinal];
				estadoAtual[11-casaFinal]=0;
			}
		} 
		
		if(casaFinal  < 6 && jogadorDaVez == jogadores[1]){
			casaFinal--;
			if(casaFinal==-1){
				casaFinal = 13;
				this.trocarVezJogador(jogadorDaVez);
			}
		}else{
			if(estadoAtual[casaFinal]==0 && jogadorDaVez == jogadores[1]){
				estadoAtual[13]= estadoAtual[13]+estadoAtual[11-casaFinal];
				estadoAtual[11-casaFinal]=0;
			}
		}	
		return estadoAtual;
	}
	 
	public void trocarVezJogador(Jogador jogadorDaVez) {
		if(jogadores[0].daVez == true){
			jogadores[0].daVez = false;
			jogadores[1].daVez = true;
		} else{
			jogadores[0].daVez = true;
			jogadores[1].daVez = false;
		}
	}
	 
	public void iniciarPartida() {
		partidaEmAndamento = true;
		this.instanciarJogadores(interf);
		jogadores[0].daVez = true;
		tab.resetarTabuleiro();	
		this.prepararTabuleiro();
	}
	
	public int realizarJogadaHumano(Jogador jogadorDaVez){	
		return jogadorDaVez.realizarJogada();
	}
	
	public int realizarJogadaMaquina(){
		int casaJogada;
		int[] estadoAtual = this.informarEstadoAtual();
		
		casaJogada = jogadores[1].realizarJogada(estadoAtual);			
		return casaJogada;
	}
	
	public int[] tratarJogada (int casaJogada, Jogador jogadorDaVez){
		int[] estadoAtual = this.informarEstadoAtual();
		int[] estadoFinal;
		
		estadoFinal = this.distribuirPedras(estadoAtual, casaJogada, jogadorDaVez);
		this.trocarVezJogador(jogadorDaVez);
		
		return estadoFinal;
	}
	
	public void pedirJogada(){
		
		if(partidaEmAndamento == true){
			Jogador jogadorDaVez = this.definirJogadorDaVez();
			int casaJogada;
			int[] estadoFinal;
		
			if(interf == 1 && jogadorDaVez == jogadores[1])
				casaJogada = this.realizarJogadaMaquina();				
			else{
				casaJogada = this.realizarJogadaHumano(jogadorDaVez);
			
			}
			estadoFinal = this.tratarJogada(casaJogada, jogadorDaVez);
			tab.atualizaTabuleiro(estadoFinal);
			this.verificarContinuidade();
		}
	}
	
	public Jogador definirJogadorDaVez(){
		Jogador jogadorDaVez;
		
		if(jogadores[0].daVez == true)
			jogadorDaVez = jogadores[0];
		else
			jogadorDaVez = jogadores[1];
		
		return jogadorDaVez;
	}
	
	public String retorneJogador(Jogador jogador){
		return jogador.retorneLetraJogador();
	}
	
	public int retorneInterface(){
		return this.interf;
	}
	
	public Jogador retorneVencedor(){
		return this.vencedor;
	}
}
 
