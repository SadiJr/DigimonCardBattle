package app;

import java.util.Arrays;

public class ControladorTabuleiro {
 
	protected Jogador[] jogadores;
	protected Tabuleiro tab;
	protected int[] estadoTab;
	protected boolean partidaEmAndamento;
	protected Jogador vencedor;
	protected int interf;
	
	public ControladorTabuleiro(){
		tab = new Tabuleiro();
		jogadores = new Jogador[2];
		partidaEmAndamento = false;
	}
	
	public void prepararTabuleiro() {
		tab.resetarTabuleiro();
	}
	 
	public void escolherInterface(int tipoInterface) {
		this.interf = tipoInterface;
	}
	 
	public void verificarContinuidade() {
		int casasVazias = 0;
		estadoTab = tab.informarEstadoTabuleiro();
		
		for(int i = 0; i < 6; i ++){
			if(estadoTab[i] == 0){
				casasVazias ++;
			}
		}
		if(!(casasVazias == 6)){
			casasVazias = 0;
			for(int i = 6; i < 12; i ++){
				if(estadoTab[i] == 0){
					casasVazias ++;
				}
			}
		}
		
		if (casasVazias == 6){
			this.verificarVencedor();
			this.partidaEmAndamento = false;
		}
	}
	 
	public void verificarVencedor() {
		
		int repJog0 = tab.informarPedrasRepositorios(0);
		int repJog1 = tab.informarPedrasRepositorios(1);
		
		if (repJog0 > repJog1){
			jogadores[0].setVencedor();
			vencedor = jogadores[0];
		} else if (repJog0 < repJog1){
			jogadores[1].setVencedor();
			vencedor = jogadores[1];
		}	
	}
	 
	public boolean verificarPartidaAndamento() {
		return partidaEmAndamento;
	}
	 
	public Jogador informarVencedor() {
		return vencedor;
	}
	 
	public boolean verificarPosicaoLegal(int casa, Jogador jogadorDaVez) {
		//perguntar professor
		return false;
	}
	 
	public int[] distribuirPedras(int[] estadoAtual, int casa) {
		
		int nroPedraCasa = estadoAtual[casa];
		int PedrasRestantes = nroPedraCasa;
		int casaDaVez = casa;
		
		for(int i = 0; i>=nroPedraCasa; i ++){
			if(casaDaVez <= 5 ){
				estadoAtual[casaDaVez+1] = estadoAtual[casaDaVez+1] + 1;
				
			}
			if(casaDaVez == 5 && PedrasRestantes > 1){
				estadoAtual[12] = estadoAtual[12]+1;
				PedrasRestantes--;
			}
			
			if(casaDaVez >= 6  && casaDaVez < 12){
				estadoAtual[casaDaVez+1] = estadoAtual[casaDaVez+1] + 1;
				
			}
			if(casaDaVez == 6 && PedrasRestantes > 1){
				estadoAtual[13] = estadoAtual[13]+1;
			}
			
			
			casaDaVez++;
			PedrasRestantes--;
			
			if(casaDaVez == 12){
				casaDaVez = 0;
			}
		}
		
		
		
		estadoAtual[casa] = 0;
		return estadoAtual;
	}
	 
	public void trocarVezJogadore(Jogador jogadorDaVez) {
		if(jogadores[0].daVez == true){
			jogadores[0].daVez = false;
			jogadores[1].daVez = true;
		} else{
			jogadores[0].daVez = true;
			jogadores[1].daVez = false;
		}
	}
	 
	public void iniciarPartida() {
		partidaEmAndamento = true;
		jogadores[0] = new JogadorHumano();
		
		if (this.interf == 0){
			jogadores[1] = new JogadorHumano();
		} else {
			jogadores[1] = new JogadorMaquina();
		}
		
		if(this.existeTabuleiro()){
			tab.resetarTabuleiro();
		}else{
			tab = new Tabuleiro();
		}
		
	}
	 
	public boolean existeTabuleiro() {
		boolean existe = true;
		
		if (this.tab == null){
			existe = false;
		}
		
		return existe;
	}
	 
}
 
