package interfaceGrafica;

import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.lang.reflect.Field;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import rede.AtorRede;
import br.ufsc.inf.leobr.cliente.Proxy;
import dominioProblema.ImagemDeTabuleiro;
import dominioProblema.Tabuleiro;

public class AtorJogador extends JFrame {

	private static final long serialVersionUID = 1L;

	private JPanel jContentPane = null;

	protected Tabuleiro tab; 
	protected String idJ1;
	
	private JLabel 
	//Declara todas as posições que aparecerão na tela 
	vPosicao1_1 = null,	vPosicao1_2 = null,	vPosicao1_3 = null,	vPosicao1_4 = null,	vPosicao1_5 = null,	vPosicao1_6 = null,	vPosicao1_7 = null,	   
	vPosicao1_8 = null, vPosicao1_9 = null,	vPosicao1_10 = null, vPosicao2_1 = null, vPosicao2_2 = null, vPosicao2_3 = null, vPosicao2_4 = null,	   
	vPosicao2_5 = null,	vPosicao2_6 = null,	vPosicao2_7 = null,	vPosicao2_8 = null,	vPosicao2_9 = null,	vPosicao2_10 = null, vPosicao3_1 = null,	   
	vPosicao3_2 = null, vPosicao3_3 = null,	vPosicao3_4 = null,	vPosicao3_5 = null,	vPosicao3_6 = null,	vPosicao3_7 = null,	vPosicao3_8 = null,	   
	vPosicao3_9 = null,	vPosicao3_10 = null, vPosicao4_1 = null, vPosicao4_2 = null, vPosicao4_3 = null, vPosicao4_4 = null, vPosicao4_5 = null,	   
	vPosicao4_6 = null,	vPosicao4_7 = null,	vPosicao4_8 = null,	vPosicao4_9 = null,	vPosicao4_10 = null, vPosicao5_1 = null, vPosicao5_2 = null,	   
	vPosicao5_3 = null,	vPosicao5_4 = null,	vPosicao5_5 = null,	vPosicao5_6 = null,	vPosicao5_7 = null,	vPosicao5_8 = null,	vPosicao5_9 = null,	   
	vPosicao5_10 = null, vPosicao6_1 = null, vPosicao6_2 = null, vPosicao6_3 = null, vPosicao6_4 = null, vPosicao6_5 = null, vPosicao6_6 = null,	   
	vPosicao6_7 = null,	vPosicao6_8 = null, vPosicao6_9 = null, vPosicao6_10 = null, vPosicao7_1 = null, vPosicao7_2 = null, vPosicao7_3 = null,	   
	vPosicao7_4 = null,	vPosicao7_5 = null, vPosicao7_6 = null, vPosicao7_7 = null, vPosicao7_8 = null, vPosicao7_9 = null,	vPosicao7_10 = null,	   
	vPosicao8_1 = null, vPosicao8_2 = null, vPosicao8_3 = null, vPosicao8_4 = null, vPosicao8_5 = null, vPosicao8_6 = null, vPosicao8_7 = null,	   
	vPosicao8_8 = null,	vPosicao8_9 = null,	vPosicao8_10 = null, vPosicao9_1 = null, vPosicao9_2 = null, vPosicao9_3 = null, vPosicao9_4 = null,	   
	vPosicao9_5 = null,	vPosicao9_6 = null,	vPosicao9_7 = null, vPosicao9_8 = null,	vPosicao9_9 = null, vPosicao9_10 = null, vPosicao10_1 = null,	   
	vPosicao10_2 = null, vPosicao10_3 = null, vPosicao10_4 = null, vPosicao10_5 = null, vPosicao10_6 = null, vPosicao10_7 = null,
	vPosicao10_8 = null, vPosicao10_9 = null, vPosicao10_10 = null, 
	//Declara a mensagem que mostrará na tela.
	vMensagem = null;

	protected JLabel mapaVPosicao[][] = new JLabel[10][10];

	private JMenuBar jMenuBar1 = null;

	private JMenu menuJogo = null;

	private JMenuItem jMenuItemIniciarPartida = null,
			jMenuItemReiniciarPartida = null;

	private AtorRede atorRede;

	public AtorJogador() throws HeadlessException {
		super();
		initialize();
	}

	public AtorJogador(GraphicsConfiguration arg0) {
		super(arg0);
		initialize();
	}

	public AtorJogador(String arg0) throws HeadlessException {
		super(arg0);
		initialize();
	}

	public AtorJogador(String arg0, GraphicsConfiguration arg1) {
		super(arg0, arg1);
		initialize();
	}

	/**
	 * This method initializes this
	 * 
	 * @return void
	 */
	private void initialize() {
		atorRede = new AtorRede(this);
		tab = new Tabuleiro();
		tab.iniciar();
		this.setSize(360, 420);
		this.setContentPane(getJContentPane());
		this.setTitle("Alex the Allegator II");		
	}

	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	
	public JPanel getJContentPane() {
		if (jContentPane == null) {
			Icon vazia = new ImageIcon(ClassLoader.getSystemResource("vazia.png"));
			Icon azul = new ImageIcon(ClassLoader.getSystemResource("azul.png"));
			Icon verde = new ImageIcon(ClassLoader.getSystemResource("verde.png"));
			Icon esquerda = new ImageIcon(ClassLoader.getSystemResource("esquerda.png"));
			Icon direita = new ImageIcon(ClassLoader.getSystemResource("direita.png"));
			Icon cima = new ImageIcon(ClassLoader.getSystemResource("cima.png"));
			Icon baixo = new ImageIcon(ClassLoader.getSystemResource("baixo.png"));
			Icon inativa = new ImageIcon(ClassLoader.getSystemResource("inativa.png"));

			vMensagem = new JLabel();
			vMensagem.setBounds(new Rectangle(25, 10, 200, 20));
			vMensagem.setText("Colocar os nomes");
			
			jMenuBar1 = new JMenuBar();
			jMenuBar1.add(getMenuJogo());
			jMenuBar1.add(atorRede.getMenuRede());
			this.setJMenuBar(jMenuBar1);
			
			jContentPane = new JPanel();
			jContentPane.setLayout(null);
			
			int xInicial = 20;
			int yinicial = 40;
			
			//Cria os objetos por reflection
			for (int ii = 1;ii < 11; ii++){
				for (int jj = 1;jj < 11; jj++){
					String fieldName = "vPosicao" + ii + "_" + jj;
					try {
						final int linha = ii;
						final int coluna = jj;
						
						boolean ehInativa = tab.informarPosicaoInativa(ii, jj);
						Field f = this.getClass().getDeclaredField(fieldName);
						JLabel label = (JLabel)f.get(this);
						label = new JLabel();
						label.setBounds(new Rectangle(xInicial, yinicial, 30, 30));
						label.setIcon(vazia);
						if(linha == 1){
							label.setIcon(cima);
						}	
						if(linha == 10){
							label.setIcon(baixo);		
						}	
						if(coluna == 1){
							label.setIcon(esquerda);
						}							
						if(coluna == 10){
							label.setIcon(direita);
						}
						
						if(! ehInativa) {
							label.addMouseListener(new java.awt.event.MouseAdapter() {
								public void mouseClicked(java.awt.event.MouseEvent e) {
									click(linha, coluna);
								}
							});								
						}else{
							label.setIcon(inativa);
						}
						
						jContentPane.add(label, null);
						mapaVPosicao[ii-1][jj-1] = label;
						
						if(xInicial == 290){
							xInicial = 20;
							yinicial = yinicial+30;
							continue;
						}
						xInicial = xInicial+30;							
					} catch (SecurityException e1) {
						e1.printStackTrace();
					} catch (NoSuchFieldException e1) {
						e1.printStackTrace();
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}
				}
			}
			jContentPane.add(vMensagem, null);
		}
		return jContentPane;
	}
	
//	public void iniciarPartida() {		
//		
//		boolean emAndamento = false;
//		boolean autoriza = true;
//		boolean simbolo = true;
//		String idJ2 = "programa";
//
//		if (tab == null) {
//			tab = new Tabuleiro();
//			tab.iniciar();
//		}
//		
//		emAndamento = tab.InformarPartidaEmAndamento();
//		if (emAndamento) {
//			autoriza = this.avaliarInterrupcao();
//		}
//		
//		if (!emAndamento || autoriza) {
//			idJ1 = this.obterIdJogador(" 1");
//			simbolo = this.obterSimboloJogador();
//			tab.criarJogadorHumano(idJ1, simbolo);
//			idJ2 = this.obterIdJogador(" 2");
//			tab.criarJogadorHumano(idJ2, !simbolo);
//			this.estabelecerSequenciamento();
//			this.alocarPosicoesIniciais();
//			this.exibirEstado();
//		}
//	}
	
public void iniciarPartida() {		
		
		boolean emAndamento = false;
		boolean autoriza = true;
		boolean simbolo = true;
		String idJ2 = "programa";

		if (tab == null) {
			tab = new Tabuleiro();
			tab.iniciar();
		}
		
		emAndamento = tab.InformarPartidaEmAndamento();

		
		if (!emAndamento || autoriza) {
			idJ1 = this.obterIdJogador(" 1");
			simbolo = this.obterSimboloJogador();
			tab.criarJogadorHumano(idJ1, simbolo);
			idJ2 = this.obterIdJogador(" 2");
			tab.criarJogadorHumano(idJ2, !simbolo);
			this.estabelecerSequenciamento();
			this.alocarPosicoesIniciais();
			this.exibirEstado();
		}
	}
	public void alocarPosicoesIniciais(){
		tab.click(5, 5);
		tab.click(5, 6);
		tab.click(6, 6);
		tab.click(6, 5);	
	}
	 
//	public boolean avaliarInterrupcao() {
//		boolean afirmativo = false;
//		boolean condRepetir = true;
//		int resposta;
//		while (condRepetir) {
//			resposta = JOptionPane.showConfirmDialog(this,
//					"Deseja interromper partida em andamento?");
//			afirmativo = resposta == JOptionPane.YES_OPTION;
//			condRepetir = resposta == JOptionPane.CANCEL_OPTION;
//		}
//		return afirmativo;
//	}

	public String obterIdJogador(String ordem) {
		String idJogador = ("jogador" + ordem);
		idJogador = JOptionPane.showInputDialog(this,
				("Insira o nome do jogador" + ordem));
		return idJogador;
	}

	public void estabelecerSequenciamento() {
		this.definirOPrimeiro();
		this.exibirEstado();
	}

	public void definirOPrimeiro() {
		boolean afirmativo = false;
		boolean condRepetir = true;
		int resposta;
		while (condRepetir) {
			resposta = JOptionPane.showConfirmDialog(this,
					(idJ1 + " inicia a partida?"));
			afirmativo = resposta == JOptionPane.YES_OPTION;
			condRepetir = resposta == JOptionPane.CANCEL_OPTION;
		}
		;
		if (afirmativo) {
			tab.definirOPrimeiro(1);
		} else {
			tab.definirOPrimeiro(2);
		}
		;
	}

	public boolean obterSimboloJogador() {
		return (DialogoSimbolo.informaSimbolo("Qual o simbolo do jogador "
				+ idJ1 + "?"));
	}
	
	public void reiniciarPartida() {
		boolean emAndamento = false;
		boolean autoriza = false;
		boolean jogadores = false;
		if (tab == null) {
			this.iniciarPartida();
		} else { // ;
			emAndamento = tab.InformarPartidaEmAndamento();
			jogadores = tab.informarExistenciaJogadores();
			if (jogadores) {				
				if (!emAndamento || autoriza) {
					this.estabelecerSequenciamento();
				}
				;
			} else {
				this.iniciarPartida();
			}
			;
		}
		;
	}

	/**
	 * Efetua a jogada no modelo.
	 * 
	 * @param linha
	 * @param coluna
	 */
	 
	public void click(int linha, int coluna) {
		System.out.println("linha " + linha + "coluna "+ coluna );
		if (atorRede.ehJogoRede() && !(atorRede.ehMinhaVez())) {
			JOptionPane.showMessageDialog(this,
					"Não é sua vez, por favor aguarde!");
			return;
		}

		int resultado = 0;
		resultado = tab.click(linha, coluna);

		if (resultado == 0) {
			// envia a jogada para o outro lado da conexão se o jogo for de rede
			atorRede.enviarJogadaRede(linha, coluna);
			this.exibirEstado();
		} else {
			this.notificarIrregularidade(resultado);
		}
		;
	}

	

	 
	/**
	 * Envia a jogada para o outro jogador
	 * @param linha
	 * @param coluna
	 */
	public void efetuarJogadaRede(int linha, int coluna) {
		if (atorRede.ehJogoRede()){
			tab.click(linha, coluna);
			this.exibirEstado();
		}
	}

	 
	public void exibirEstado() {
		ImagemDeTabuleiro estado;
		int valor = 0;
		Icon vazia = new ImageIcon(ClassLoader.getSystemResource("vazia.png"));
		Icon azul = new ImageIcon(ClassLoader.getSystemResource("azul.png"));
		Icon verde = new ImageIcon(ClassLoader.getSystemResource("verde.png"));
		Icon esquerda = new ImageIcon(ClassLoader.getSystemResource("esquerda.png"));
		Icon direita = new ImageIcon(ClassLoader.getSystemResource("direita.png"));
		Icon cima = new ImageIcon(ClassLoader.getSystemResource("cima.png"));
		Icon baixo = new ImageIcon(ClassLoader.getSystemResource("baixo.png"));
		estado = tab.informarEstado();
		vMensagem.setText(estado.informarMensagem());
		for (int linha = 1; linha < 11; linha++) {
			for (int coluna = 1; coluna < 11; coluna++) {
				valor = estado.informarValor(linha, coluna);
				switch (valor) {
				case 0:
					mapaVPosicao[(linha - 1)][(coluna - 1)].setIcon(vazia);
					break;
				case 1:
					mapaVPosicao[(linha - 1)][(coluna - 1)].setIcon(azul);
					break;
				case 2:
					mapaVPosicao[(linha - 1)][(coluna - 1)].setIcon(verde);
				}
			}
		}
		System.out.println("======================EXIBIU O ESTADO");
	}
	 
	public void notificarIrregularidade(int codigo) {
		if (codigo == 2) {
			JOptionPane.showMessageDialog(this,
					"Partida encerrada ou não iniciada");
		} else {
			JOptionPane.showMessageDialog(this,
					"Posição ocupada. Jogue novamente");
		}
		;
	}

	/**
	 * This method initializes Jogo
	 * 
	 * @return javax.swing.JMenu
	 */

	 
	private JMenu getMenuJogo() {
		if (menuJogo == null) {
			menuJogo = new JMenu();
			menuJogo.setText("Jogo");
			menuJogo.setBounds(new Rectangle(1, 0, 57, 21));
			menuJogo.add(getJMenuItemIniciarPartida());
			menuJogo.add(getJMenuItemReiniciarPartida());
		}
		return menuJogo;
	}

	/**
	 * This method initializes jMenuItem1
	 * 
	 * @return javax.swing.JMenuItem
	 */
	 
	private JMenuItem getJMenuItemIniciarPartida() {
		if (jMenuItemIniciarPartida == null) {
			jMenuItemIniciarPartida = new JMenuItem();
			jMenuItemIniciarPartida.setText("iniciar nova partida");
			jMenuItemIniciarPartida
					.addActionListener(new java.awt.event.ActionListener() {
						public void actionPerformed(java.awt.event.ActionEvent e) {
							iniciarPartida();
						}
					});
		}
		return jMenuItemIniciarPartida;
	}

	/**
	 * This method initializes jMenuItem2
	 * 
	 * @return javax.swing.JMenuItem
	 */
	 
	private JMenuItem getJMenuItemReiniciarPartida() {
		if (jMenuItemReiniciarPartida == null) {
			jMenuItemReiniciarPartida = new JMenuItem();
			jMenuItemReiniciarPartida.setText("reiniciar partida");
			jMenuItemReiniciarPartida
					.addActionListener(new java.awt.event.ActionListener() {
						public void actionPerformed(java.awt.event.ActionEvent e) {
							reiniciarPartida();
						}
					});
		}
		return jMenuItemReiniciarPartida;
	}
	
	 
	/**
	 * Inicia uma partida de rede assim que recebe a mensagem do servidor.
	 * @param iniciarComoSolicitante
	 */
	public void iniciarPartidaRede(boolean iniciarComoSolicitante) {

		boolean simbolo = true;

		if (tab == null) {
			tab = new Tabuleiro();
			tab.iniciar();
		}

		if (iniciarComoSolicitante) {
			simbolo = true;
		} else {
			simbolo = false;
		}

		idJ1 = Proxy.getInstance().getNomeJogador();

		tab.criarJogadorHumano(idJ1, simbolo);

		String idJ2 = atorRede.obtemNomeAdversario();
		tab.criarJogadorHumano(idJ2, !simbolo);
		
		if (iniciarComoSolicitante) {
			tab.definirOPrimeiro(1);

		} else {
			tab.definirOPrimeiro(2);
		}

		this.exibirEstado();

	}
}
