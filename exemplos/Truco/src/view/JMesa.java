/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JMesa.java
 *
 * Created on 16/06/2010, 23:57:17
 */
package view;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.AtorJogador;
import model.Carta;
import model.Dupla;
import model.Jogador;
import model.Lance;
import model.Mesa;
import model.RespostaTruco;
import model.Rodada;

import view.util.LabelVerticalUI;

/**
 *
 * @author julia
 */
public class JMesa extends javax.swing.JFrame {

    AtorJogador atorJogador;
    protected static final int START = 1;
    protected static final int CONECTADO = 2;

    public JMesa() {


        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.atualizarVisibilidadeTela(START);
        atorJogador = new AtorJogador(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMesa = new javax.swing.JPanel();
        jPanelCompanheiro = new javax.swing.JPanel();
        jPanelAdversarioDireita = new javax.swing.JPanel();
        jPanelAdversarioEsquerda = new javax.swing.JPanel();
        jPanelJogador = new javax.swing.JPanel();
        jLabelAdversarioEsquerda = new javax.swing.JLabel();
        jLabelAdversarioDireita = new javax.swing.JLabel();
        jLabelJogador = new javax.swing.JLabel();
        jLabelCompanheiro = new javax.swing.JLabel();
        jLabelCompartilhadaJogador = new javax.swing.JLabel();
        jLabelCompartilhadaAdversarioDireita = new javax.swing.JLabel();
        jLabelCompartilhadaCompanheiro = new javax.swing.JLabel();
        jLabelComparilhadaAdversarioEsquerda = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelTextGato = new javax.swing.JLabel();
        jLabelGato = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelTextPlacar = new javax.swing.JLabel();
        jLabelTextDuplaA = new javax.swing.JLabel();
        jLabelTextDuplaB = new javax.swing.JLabel();
        jLabelValuePlacarDuplaA = new javax.swing.JLabel();
        jLabelValuePlacarDuplaB = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelTextRodadas = new javax.swing.JLabel();
        jLabelText1aRodada = new javax.swing.JLabel();
        jLabelText2aRodada = new javax.swing.JLabel();
        jLabelText3aRodada = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabelValue1aRodada = new javax.swing.JLabel();
        jLabelValue2aRodada = new javax.swing.JLabel();
        jLabelValue3aRodada = new javax.swing.JLabel();
        jButtonDesistir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelValorMao = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabelJogadorVez = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemConectar = new javax.swing.JMenuItem();
        jMenuItemIniciarPartida = new javax.swing.JMenuItem();
        jMenuItemDesconectar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(52, 171, 43));
        setBounds(new java.awt.Rectangle(0, 0, 1387, 722));
        setResizable(false);

        jPanelMesa.setBackground(new java.awt.Color(33, 158, 21));
        jPanelMesa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanelMesa.setMaximumSize(new java.awt.Dimension(821, 620));
        jPanelMesa.setMinimumSize(new java.awt.Dimension(821, 620));
        jPanelMesa.setRequestFocusEnabled(false);

        jPanelCompanheiro.setBackground(new java.awt.Color(33, 158, 21));
        jPanelCompanheiro.setMinimumSize(new java.awt.Dimension(423, 103));
        jPanelCompanheiro.setPreferredSize(new java.awt.Dimension(423, 103));
        jPanelCompanheiro.setLayout(new java.awt.GridLayout(1, 3, 3, 3));

        jPanelAdversarioDireita.setBackground(new java.awt.Color(33, 158, 21));
        jPanelAdversarioDireita.setPreferredSize(new java.awt.Dimension(117, 445));
        jPanelAdversarioDireita.setLayout(new java.awt.GridLayout(3, 1, 40, 3));

        jPanelAdversarioEsquerda.setBackground(new java.awt.Color(33, 158, 21));
        jPanelAdversarioEsquerda.setMinimumSize(new java.awt.Dimension(149, 353));
        jPanelAdversarioEsquerda.setLayout(new java.awt.GridLayout(3, 1, 40, 0));

        jPanelJogador.setBackground(new java.awt.Color(33, 158, 21));
        jPanelJogador.setLayout(new java.awt.GridLayout(1, 3, 3, 3));

        jLabelAdversarioEsquerda.setText("           ");
        jLabelAdversarioEsquerda.setUI(new LabelVerticalUI(true));

        jLabelAdversarioDireita.setText("           ");
        jLabelAdversarioDireita.setUI(new LabelVerticalUI(true));

        jLabelJogador.setText("           ");

        jLabelCompanheiro.setText("           ");

        jLabelCompartilhadaJogador.setText("        ");

        jLabelCompartilhadaAdversarioDireita.setText("        ");

        jLabelCompartilhadaCompanheiro.setText("        ");

        jLabelComparilhadaAdversarioEsquerda.setText("        ");

        javax.swing.GroupLayout jPanelMesaLayout = new javax.swing.GroupLayout(jPanelMesa);
        jPanelMesa.setLayout(jPanelMesaLayout);
        jPanelMesaLayout.setHorizontalGroup(
            jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMesaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMesaLayout.createSequentialGroup()
                        .addComponent(jLabelAdversarioEsquerda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelAdversarioEsquerda, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMesaLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelMesaLayout.createSequentialGroup()
                                                .addComponent(jPanelCompanheiro, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(jPanelMesaLayout.createSequentialGroup()
                                                .addComponent(jPanelJogador, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                                                .addGap(57, 57, 57)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMesaLayout.createSequentialGroup()
                                            .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabelCompartilhadaCompanheiro)
                                                .addComponent(jLabelCompartilhadaJogador))
                                            .addGap(193, 193, 193))))
                                .addGroup(jPanelMesaLayout.createSequentialGroup()
                                    .addComponent(jLabelCompartilhadaAdversarioDireita)
                                    .addGap(22, 22, 22)))
                            .addGroup(jPanelMesaLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabelComparilhadaAdversarioEsquerda)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jPanelAdversarioDireita, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAdversarioDireita)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMesaLayout.createSequentialGroup()
                        .addComponent(jLabelJogador)
                        .addGap(380, 380, 380))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMesaLayout.createSequentialGroup()
                        .addComponent(jLabelCompanheiro)
                        .addGap(417, 417, 417))))
        );
        jPanelMesaLayout.setVerticalGroup(
            jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMesaLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabelCompanheiro)
                .addGap(18, 18, 18)
                .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMesaLayout.createSequentialGroup()
                        .addComponent(jPanelCompanheiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanelMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelAdversarioDireita, 0, 0, Short.MAX_VALUE)
                            .addGroup(jPanelMesaLayout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(jLabelCompartilhadaAdversarioDireita)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(jLabelCompartilhadaJogador)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelMesaLayout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(jLabelComparilhadaAdversarioEsquerda)
                                .addGap(11, 11, 11)
                                .addComponent(jLabelAdversarioEsquerda))
                            .addComponent(jPanelAdversarioEsquerda, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jLabelJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(jPanelMesaLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabelCompartilhadaCompanheiro)
                        .addGap(134, 134, 134)
                        .addComponent(jLabelAdversarioDireita)
                        .addContainerGap(289, Short.MAX_VALUE))))
        );

        jLabelTextGato.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabelTextGato.setText("Carta Virada:");

        jLabelGato.setText("    ");

        jLabelTextPlacar.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabelTextPlacar.setText("Placar");

        jLabelTextDuplaA.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabelTextDuplaA.setForeground(java.awt.Color.blue);
        jLabelTextDuplaA.setText("Dupla A");

        jLabelTextDuplaB.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabelTextDuplaB.setForeground(java.awt.Color.red);
        jLabelTextDuplaB.setText("Dupla B");

        jLabelValuePlacarDuplaA.setFont(new java.awt.Font("DejaVu Sans", 1, 24));
        jLabelValuePlacarDuplaA.setText("0");

        jLabelValuePlacarDuplaB.setFont(new java.awt.Font("DejaVu Sans", 1, 24));
        jLabelValuePlacarDuplaB.setText("0");

        jLabelTextRodadas.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabelTextRodadas.setText("Rodadas");

        jLabelText1aRodada.setText("1a Rodada:");

        jLabelText2aRodada.setText("2a Rodada:");

        jLabelText3aRodada.setText("3a Rodada:");

        jButton1.setText("TRUCO!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelValue1aRodada.setText("       ");

        jLabelValue2aRodada.setText("         ");

        jLabelValue3aRodada.setText("         ");

        jButtonDesistir.setText("DESISTIR!");
        jButtonDesistir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesistirActionPerformed(evt);
            }
        });

        jLabel1.setText("Mão Valendo: ");

        jLabelValorMao.setText("    ");

        jLabel2.setText("Jogador da vez:");

        jLabelJogadorVez.setText("    ");

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabel3.setText("Status:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTextDuplaA)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabelValuePlacarDuplaA)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jLabelTextDuplaB))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jLabelValuePlacarDuplaB)))
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDesistir, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                        .addGap(52, 52, 52))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelTextRodadas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelJogadorVez)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jLabelValorMao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelText1aRodada)
                            .addComponent(jLabelText2aRodada)
                            .addComponent(jLabelText3aRodada))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelValue2aRodada)
                            .addComponent(jLabelValue1aRodada)
                            .addComponent(jLabelValue3aRodada))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabelTextPlacar))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(226, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTextGato)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelGato)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTextPlacar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTextDuplaA)
                    .addComponent(jLabelTextDuplaB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelValuePlacarDuplaA)
                    .addComponent(jLabelValuePlacarDuplaB))
                .addGap(21, 21, 21)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTextGato, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabelGato)))
                .addGap(105, 105, 105)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelValorMao)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelJogadorVez))
                .addGap(2, 2, 2)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelTextRodadas)
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelText1aRodada)
                    .addComponent(jLabelValue1aRodada))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelText2aRodada)
                    .addComponent(jLabelValue2aRodada))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelText3aRodada)
                    .addComponent(jLabelValue3aRodada))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(jButtonDesistir))
                .addGap(118, 118, 118))
        );

        jMenu1.setText("Menu");

        jMenuItemConectar.setText("Conectar");
        jMenuItemConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConectarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemConectar);

        jMenuItemIniciarPartida.setText("Iniciar Partida");
        jMenuItemIniciarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemIniciarPartidaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemIniciarPartida);

        jMenuItemDesconectar.setText("Desconectar");
        jMenuItemDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDesconectarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDesconectar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ajuda");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConectarActionPerformed
        this.conectar();
    }//GEN-LAST:event_jMenuItemConectarActionPerformed

    public String getNomeJogador() {
        return JOptionPane.showInputDialog(this, "Digite seu nome: ", "jogador");
    }

    public String getNomeServidor() {
        return JOptionPane.showInputDialog(this, "Digite o servidor: ", "localhost");
    }

    public void conectar() {

        String nomeAtual =  this.getNomeJogador();
        String servidor = this.getNomeServidor();


        boolean conectou = atorJogador.conectar(servidor, nomeAtual);
        atorJogador.setJogadorAtual(new Jogador(nomeAtual));

        if (conectou) {

            this.adicionarTitulo(nomeAtual);
            this.atualizarVisibilidadeTela(CONECTADO);
            this.exibeMensagem("Conectado com sucesso!");

        } else {
            this.exibeMensagem("Não foi possível conectar!");
        }



    }

    private void adicionarTitulo(String nome) {
        this.setTitle(nome);
    }

    private void jMenuItemIniciarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemIniciarPartidaActionPerformed

        atorJogador.iniciarPartida();

    }//GEN-LAST:event_jMenuItemIniciarPartidaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        atorJogador.pedirTruco();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonDesistirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesistirActionPerformed
        atorJogador.desistir();

    }//GEN-LAST:event_jButtonDesistirActionPerformed

    private void jMenuItemDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDesconectarActionPerformed

        atorJogador.desconectar();
    }//GEN-LAST:event_jMenuItemDesconectarActionPerformed

    public void atualizarVisibilidadeTela(int valor) {


        if (valor == START) {
            jMenuItemConectar.setEnabled(true);
            jMenuItemDesconectar.setEnabled(false);
            jMenuItemIniciarPartida.setEnabled(false);
        } else if (valor == CONECTADO) {
            jMenuItemDesconectar.setEnabled(true);
            jMenuItemIniciarPartida.setEnabled(true);
            jMenuItemConectar.setEnabled(false);

        }


    }

    public void recebeMesa(Mesa mesa) {


        if (mesa.getStatus().equals(Mesa.StatusMesa.INICAR_PARTIDA)) {
            this.iniciarPartida(mesa);
            JOptionPane.showMessageDialog(this, "Uma nova partida vai iniciar");

        } else if (mesa.getStatus().equals(Mesa.StatusMesa.INICIAR_MAO)) {

            this.iniciarMao(mesa);

        } else if (mesa.getStatus().equals(Mesa.StatusMesa.INICIAR_RODADA)) {

            this.iniciarRodada(mesa);

        } else if (mesa.getStatus().equals(Mesa.StatusMesa.TRUCO)) {

            this.exibeMensagem("O truco vai começar!");
            atorJogador.limparLancesRecebidos();

        } else if (mesa.getStatus().equals(Mesa.StatusMesa.DESISTIR)) {
            this.iniciarMao(mesa);
            //FIXME
            this.exibeMensagem("Um jogador desistiu, a mão vai ser reiniciada!");
        }

        this.atualizaMaoValendo(mesa);
        this.atualizaJogadorVez(mesa);

        this.validate();
    }

    public void limpaTodosCampos() {

        this.limparCartasCompartilhadas();
        this.limparNomeJogadores();
        this.limparPanelStatus();
        this.limparPanelsCartasJogadores();
        this.limparGato();

    }

    private void limparGato() {

        jLabelGato.setIcon(null);

    }

    private void atualizaMaoValendo(Mesa mesa) {

        jLabelValorMao.setText(mesa.getMao().getValorDaMao() + "");


    }

    public void atualizaJogadorVez(Mesa mesa) {

        jLabelJogadorVez.setText(mesa.getJogadorDaVez().getNome());
    }

    private void limparNomeJogadores() {

        jLabelAdversarioDireita.setText("      ");
        jLabelAdversarioEsquerda.setText("      ");
        jLabelCompanheiro.setText("      ");
        jLabelJogador.setText("      ");


    }

    private void limparPanelStatus() {

        jLabelValorMao.setText("   ");
        jLabelJogadorVez.setText("   ");


    }

    private void limparPanelsCartasJogadores() {
        jPanelAdversarioDireita.removeAll();
        jPanelJogador.removeAll();
        jPanelCompanheiro.removeAll();
        jPanelAdversarioEsquerda.removeAll();
    }

//    private void iniciarPartida(Mesa mesa) {
//
//
//        limparPanelsCartasJogadores();
//
//
//
//        List<Jogador> jogadores = mesa.getJogadores();
//
//        for (int h = 0; h < jogadores.size(); h++) {
//
//            Jogador joga = jogadores.get(h);
//
//            if (this.atorJogador.getJogadorAtual().getNome().equals(joga.getNome())) {
//
//                jLabelJogador.setText(this.atorJogador.getJogadorAtual().getNome());
//                jLabelJogador.setForeground(atorJogador.getJogadorAtual().getDupla().getCorDaDupla());
//
//
//                for (int i = 0; i < joga.getCartas().size(); i++) {
//                    JLabel jlabel = new JLabel(joga.getCartas().get(i).getImagemFoto());
//                    jlabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
//                    jlabel.addMouseListener(new ClickCarta(joga.getCartas().get(i)));
//                    jPanelJogador.add(jlabel);
//
//                }
//
//                jLabelGato.setIcon(mesa.getCartaGato().getImagemFoto());
//                adicionaCartas(jPanelAdversarioDireita, true);
//                adicionaCartas(jPanelAdversarioEsquerda, true);
//                adicionaCartas(jPanelCompanheiro, false);
//
//
//
//                int posicaoDoProximo = this.getProximaPosicao(h);
//                joga.setProximoAJogar(jogadores.get(posicaoDoProximo));
//                Jogador adversarioDireita = jogadores.get(posicaoDoProximo);
//                jLabelAdversarioDireita.setText(adversarioDireita.getNome());
//                jLabelAdversarioDireita.setForeground(adversarioDireita.getDupla().getCorDaDupla());
//
//                int posicaoDoProximo2 = this.getProximaPosicao(posicaoDoProximo);
//
//                Jogador companheiro = jogadores.get(posicaoDoProximo2);
//                jLabelCompanheiro.setText(companheiro.getNome());
//                jLabelCompanheiro.setForeground(companheiro.getDupla().getCorDaDupla());
//
//                int posicaoDoProximo3 = this.getProximaPosicao(posicaoDoProximo2);
//
//                Jogador esquerda = jogadores.get(posicaoDoProximo3);
//                jLabelAdversarioEsquerda.setText(esquerda.getNome());
//                jLabelAdversarioEsquerda.setForeground(esquerda.getDupla().getCorDaDupla());
//            }
//
//        }
//
//
//
//    }
    private Jogador getJogadorAtualNaMesa(Mesa mesa) {

        List<Jogador> jogadores = mesa.getJogadores();

        for (int h = 0; h < jogadores.size(); h++) {
            Jogador joga = jogadores.get(h);

            if (this.atorJogador.getJogadorAtual().getNome().equals(joga.getNome())) {
                return joga;
            }
        }

        return null;

    }

    private void atualizaCartasJogadorAtual(Jogador joga) {


        for (int i = 0; i < joga.getCartas().size(); i++) {
            JLabel jlabel = new JLabel(joga.getCartas().get(i).getImagemFoto());
            jlabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            jlabel.addMouseListener(new ClickCarta(joga.getCartas().get(i)));
            jPanelJogador.add(jlabel);

        }

    }

    private void atualizaCartasAdversarios() {
        adicionaCartas(jPanelAdversarioDireita, true);
        adicionaCartas(jPanelAdversarioEsquerda, true);
        adicionaCartas(jPanelCompanheiro, false);

    }

    private void iniciarPartida(Mesa mesa) {


        this.iniciarMao(mesa);

        this.atualizaNomesDosJogadores(mesa);


    }

    private void atualizaCartaVira(Mesa mesa) {
        jLabelGato.setIcon(mesa.getCartaGato().getImagemFoto());
    }

    private void atualizaNomesDosJogadores(Mesa mesa) {

        //Jogador joga = this.getJogadorAtualNaMesa(mesa);





        List<Jogador> jogadores = mesa.getJogadores();
        for (int h = 0; h < jogadores.size(); h++) {

            Jogador joga = jogadores.get(h);

            if (this.atorJogador.getJogadorAtual().getNome().equals(joga.getNome())) {

                jLabelJogador.setText(joga.getNome());
                jLabelJogador.setForeground(joga.getDupla().getCorDaDupla());
                int posicaoDoProximo = this.getProximaPosicao(h);
                joga.setProximoAJogar(jogadores.get(posicaoDoProximo));
                Jogador adversarioDireita = jogadores.get(posicaoDoProximo);
                jLabelAdversarioDireita.setText(adversarioDireita.getNome());
                jLabelAdversarioDireita.setForeground(adversarioDireita.getDupla().getCorDaDupla());

                int posicaoDoProximo2 = this.getProximaPosicao(posicaoDoProximo);

                Jogador companheiro = jogadores.get(posicaoDoProximo2);
                jLabelCompanheiro.setText(companheiro.getNome());
                jLabelCompanheiro.setForeground(companheiro.getDupla().getCorDaDupla());

                int posicaoDoProximo3 = this.getProximaPosicao(posicaoDoProximo2);

                Jogador esquerda = jogadores.get(posicaoDoProximo3);
                jLabelAdversarioEsquerda.setText(esquerda.getNome());
                jLabelAdversarioEsquerda.setForeground(esquerda.getDupla().getCorDaDupla());

            }
        }
    }

    private void iniciarMao(Mesa mesa) {
        //iniciarPartida(mesa);

        limparPanelsCartasJogadores();


        Jogador joga = this.getJogadorAtualNaMesa(mesa);

        this.atualizaCartasJogadorAtual(joga);
        this.atualizaCartasAdversarios();
        this.atualizaCartaVira(mesa);


        iniciarRodada(mesa);
        atualizarPlacar(mesa);
        atorJogador.limparLancesRecebidos();

        this.limpaVencedorRodada();
    }

//    private void iniciarMao(Mesa mesa) {
//        iniciarPartida(mesa);
//        iniciarRodada(mesa);
//        atualizarPlacar(mesa);
//        atorJogador.limparLancesRecebidos();
//
//        for (int i = 1; i < 4; i++) {
//            this.atualizaLabelVencedorRodada("", i);
//        }
//
//    }
    private void limpaVencedorRodada() {
        for (int i = 1; i < 4; i++) {
            this.atualizaLabelVencedorRodada("", i);
        }
    }

    private void atualizarPlacar(Mesa mesa) {


        jLabelValuePlacarDuplaA.setText(mesa.getPlacarA() + "");
        jLabelValuePlacarDuplaB.setText(mesa.getPlacarB() + "");


    }

    private void limparCartasCompartilhadas() {
        jLabelComparilhadaAdversarioEsquerda.setIcon(null);
        jLabelCompartilhadaAdversarioDireita.setIcon(null);
        jLabelCompartilhadaJogador.setIcon(null);
        jLabelCompartilhadaCompanheiro.setIcon(null);

    }

    private void iniciarRodada(Mesa mesa) {

        limparCartasCompartilhadas();

        if (mesa.getMao() != null && mesa.getMao().getRodadas() != null) {

            for (int i = 0; i < mesa.getMao().getRodadas().size(); i++) {
                Rodada rodada = mesa.getMao().getRodadas().get(i);
                this.atualizaLabelVencedorRodada(rodada.getVencedorRodada().getNome(), (i + 1));

            }

        }

    }

    public void recebeTruco(Lance lance) {


        if (lance.getJogador().getNome().equals(atorJogador.getJogadorAtual().getCompanheiro().getNome())) {
            JOptionPane.showMessageDialog(this, "Seu companheiro pediu truco!");
        } else {

            this.virarCartasCompanheiro(true);

            int x = -1;

            while (x == -1) {
                String[] textMessages = {"Sim", "Não"};
                x = JOptionPane.showOptionDialog(this, "Você deseja aceitar o truco?", "TRUCO!", JOptionPane.YES_OPTION, JOptionPane.CANCEL_OPTION, null, textMessages, null);
            }



            this.virarCartasCompanheiro(false);

            boolean resposta = false;

            if (x == 0) {
                resposta = true;
            }


            RespostaTruco respostaTruco = new RespostaTruco(resposta, atorJogador.getJogadorAtual());
            Lance lanceDeResposta = new Lance();
            lanceDeResposta.setTruco(true);
            lanceDeResposta.setRespostaTruco(respostaTruco);
            lanceDeResposta.setJogador(lance.getJogador());

            atorJogador.enviarJogada(lanceDeResposta);

        }

    }

    public void virarCartasCompanheiro(boolean mostrar) {

        for (Jogador jog : atorJogador.getMesa().getJogadores()) {

            if (jog.getNome().equals(atorJogador.getJogadorAtual().getCompanheiro().getNome())) {

                Jogador companheiro = jog;
                jPanelCompanheiro.removeAll();

                for (Carta cartas : companheiro.getCartas()) {

                    JLabel label = new JLabel();

                    if (mostrar) {
                        label.setIcon(cartas.getImagemFoto());
                    } else {
                        label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Atras.png")));
                    }

                    jPanelCompanheiro.add(label);
                    jPanelCompanheiro.validate();

                }
            }



        }

    }

    private int getProximaPosicao(int valorAtual) {

        if (valorAtual == 3) {
            return 0;
        }

        return valorAtual + 1;

    }

    public void recebeLance(Lance lance) {

        Jogador jogadorAtual = atorJogador.getJogadorAtual();


        if (lance.getJogador().getNome().equals(jogadorAtual.getNome())) {
            this.jLabelCompartilhadaJogador.setIcon(lance.getCarta().getImagemFoto());



        } else if (lance.getJogador().getNome().equals(jogadorAtual.getCompanheiro().getNome())) {
            this.jLabelCompartilhadaCompanheiro.setIcon(lance.getCarta().getImagemFoto());
            this.removeLabel(jPanelCompanheiro);



        } else if (lance.getJogador().getNome().equals(jogadorAtual.getProximoAJogar().getNome())) {
            this.jLabelCompartilhadaAdversarioDireita.setIcon(lance.getCarta().getImagemFoto());
            this.removeLabel(jPanelAdversarioDireita);



        } else {
            this.jLabelComparilhadaAdversarioEsquerda.setIcon(lance.getCarta().getImagemFoto());
            this.removeLabel(jPanelAdversarioEsquerda);

        }


        this.validate();

    }

    public void atualizaLabelVencedorRodada(String nome, int posicao) {

        if (posicao == 1) {

            jLabelValue1aRodada.setText(nome);

        } else if (posicao == 2) {

            jLabelValue2aRodada.setText(nome);

        } else if (posicao == 3) {

            jLabelValue3aRodada.setText(nome);

        }

        this.validate();


    }

    private void atualizarVisibilidadeLabelsCampo(boolean aparece) {

        jLabelAdversarioDireita.setVisible(aparece);
        jLabelAdversarioEsquerda.setVisible(aparece);
        jLabelCompanheiro.setVisible(aparece);
        jLabelJogador.setVisible(aparece);

    }

    public void adicionaCartas(JPanel pn, boolean adversario) {

        ImageIcon image = null;

        if (adversario) {
            image = new javax.swing.ImageIcon(getClass().getResource("/images/Atras_direita.png"));
        } else {
            image = new javax.swing.ImageIcon(getClass().getResource("/images/Atras.png"));
        }


        for (int i = 0; i < 3; i++) {

            JLabel label = new JLabel(image);

            pn.add(label);

        }

    }

    private void removeLabel(JPanel panel) {

        panel.remove(0);
        panel.validate();

    }

    public void exibeMensagem(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem);
    }

    public void atualizarPanelJogador(Component comp) {
        jPanelJogador.remove(comp);
        jPanelJogador.validate();
    }

    public void clicouCarta(Carta carta, Component comp) {
        if (atorJogador.efetuarJogada(carta)) {
            this.atualizarPanelJogador(comp);
//                jPanelJogador.remove(comp);
//                jPanelJogador.validate();
            System.out.println("atualizando mouse clicked");
        }
    }

    public class ClickCarta extends MouseAdapter {

        private Carta carta;

        public ClickCarta(Carta carta) {
            this.carta = carta;
        }

        @Override
        public void mouseClicked(MouseEvent me) {
//            if (atorJogador.efetuarJogada(carta)) {
//                jPanelJogador.remove(me.getComponent());
//                jPanelJogador.validate();
//                System.out.println("atualizando mouse clicked");
//            }
            clicouCarta(carta, me.getComponent());
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                new JMesa().setVisible(true);


            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDesistir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelAdversarioDireita;
    private javax.swing.JLabel jLabelAdversarioEsquerda;
    private javax.swing.JLabel jLabelCompanheiro;
    private javax.swing.JLabel jLabelComparilhadaAdversarioEsquerda;
    private javax.swing.JLabel jLabelCompartilhadaAdversarioDireita;
    private javax.swing.JLabel jLabelCompartilhadaCompanheiro;
    private javax.swing.JLabel jLabelCompartilhadaJogador;
    private javax.swing.JLabel jLabelGato;
    private javax.swing.JLabel jLabelJogador;
    private javax.swing.JLabel jLabelJogadorVez;
    private javax.swing.JLabel jLabelText1aRodada;
    private javax.swing.JLabel jLabelText2aRodada;
    private javax.swing.JLabel jLabelText3aRodada;
    private javax.swing.JLabel jLabelTextDuplaA;
    private javax.swing.JLabel jLabelTextDuplaB;
    private javax.swing.JLabel jLabelTextGato;
    private javax.swing.JLabel jLabelTextPlacar;
    private javax.swing.JLabel jLabelTextRodadas;
    private javax.swing.JLabel jLabelValorMao;
    private javax.swing.JLabel jLabelValue1aRodada;
    private javax.swing.JLabel jLabelValue2aRodada;
    private javax.swing.JLabel jLabelValue3aRodada;
    private javax.swing.JLabel jLabelValuePlacarDuplaA;
    private javax.swing.JLabel jLabelValuePlacarDuplaB;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemConectar;
    private javax.swing.JMenuItem jMenuItemDesconectar;
    private javax.swing.JMenuItem jMenuItemIniciarPartida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAdversarioDireita;
    private javax.swing.JPanel jPanelAdversarioEsquerda;
    private javax.swing.JPanel jPanelCompanheiro;
    private javax.swing.JPanel jPanelJogador;
    private javax.swing.JPanel jPanelMesa;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
